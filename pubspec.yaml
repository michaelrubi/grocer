name: grocer
description: "A grocery list application."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 0.4.4

environment:
  sdk: '>=3.3.4 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # Synchronization & Connectivity
  # connectivity_plus
  # workmanager

  # Authentication
  # firebase_auth
  # google_sign_in

  # State Management
  flutter_riverpod: ^2.5.1

  # Data Storage
  firebase_core: ^2.30.0
  hive: ^2.2.3
  hive_flutter: ^1.1.0

  # UI
  font_awesome_flutter: ^10.7.0
  google_fonts: ^6.2.1
  flutter_hsvcolor_picker: ^1.5.0
  flutter_slidable: ^3.1.0

  # Data Handling
  # rxdart
  json_annotation: ^4.8.1

  # Logging
  logger: ^2.2.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^3.0.0

  # json_serializable is a Dart package that helps with JSON
  # serialization and deserialization. It generates code for 
  # converting Dart classes to and from JSON. This can save you 
  # from writing boilerplate code for JSON serialization and 
  # deserialization in your Dart projects.
  json_serializable: ^6.7.1

  # build_runner is a Dart package that helps with code generation. It runs
  # builders, which are plugins that transform code, and generates new code
  # based on the inputs provided by the builders. build_runner is commonly
  # used with packages like json_serializable to generate code for JSON
  # serialization and deserialization. It also supports other code generation
  # tasks such as code generation for Protocol Buffers (protobuf), code 
  # generation for Freezed classes, and more.
  build_runner: ^2.4.9
  
  # hive_generator is a Dart package that helps with code generation for the
  # Hive database library. Hive is a lightweight and fast object database for
  # Flutter and Dart. It allows you to store and retrieve objects in a 
  # persistent manner. hive_generator generates code for registering and 
  # serializing classes with Hive, which is necessary for persisting and 
  # retrieving objects from Hive. It analyzes the classes and generates code 
  # that registers the classes with Hive and provides serialization logic for 
  # them. This helps you avoid writing boilerplate code for registering and 
  # serializing classes with Hive.
  hive_generator: ^2.0.1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
